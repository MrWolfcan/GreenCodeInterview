{
	"info": {
		"_postman_id": "e9af4a9d-2ed9-463d-af70-11c5d3616150",
		"name": "greencode",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13423545"
	},
	"item": [
		{
			"name": "Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"const strings = [\"last_updated\", \"wind_dir\"];",
							"const numbers = [\"last_updated_epoch\", \"wind_degree\", \"humidity\", \"cloud\", \"is_day\" ,\"temp_c\", \"temp_f\", \"feelslike_c\", \"feelslike_f\", \"wind_mph\", \"wind_kph\", \"pressure_mb\", \"pressure_in\", \"precip_mm\", \"precip_in\", \"uv\", \"gust_mph\", \"gust_kph\"];",
							"const conditionStrings = [\"text\", \"icon\"];",
							"const conditionInts = [\"code\"];",
							"",
							"const all = strings.concat(numbers);",
							"const allInConditions = conditionStrings.concat(conditionInts);",
							"",
							"",
							"var responseParameters = [];",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Location is as expected\", function(){",
							"    pm.expect(responseData.location.name).to.eql(\"Prague\");",
							"})",
							"",
							"for(var i = 0; i < responseData.length; i++){",
							"    pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(all[i]);",
							"});",
							"}",
							"//check if all parameters in response have right type.",
							"for(var a = 0; a < numbers.length; a++){",
							"    if(a < strings.length){ //chyba v podmÃ­nce",
							"        pm.test(\"Type of \" + strings[a] + \" is string.\", function(){",
							"            let stringType = typeof responseData.current[strings[a]] === 'string';",
							"            pm.expect(stringType).to.eql(true);",
							"        });",
							"    }",
							"    if(a < conditionStrings.length){",
							"        pm.test(\"Type of \" + conditionStrings[a] + \" is string.\", function(){",
							"            let conditionStringType = typeof responseData.current.condition[conditionStrings[a]] === 'string';",
							"            pm.expect(conditionStringType).to.eql(true);",
							"        });",
							"    }",
							"    if(a < conditionInts.length){",
							"        pm.test(\"Type of \" + conditionInts[a] + \" is number.\", function(){",
							"            let conditionIntegerType = Number.isSafeInteger(responseData.current.condition[conditionInts[a]]);",
							"            pm.expect(conditionIntegerType).to.eql(true);",
							"        });",
							"    }",
							"    pm.test(\"Type of \" + numbers[a] + \" is number.\", function(){",
							"            let numberType = typeof responseData.current[numbers[a]] === 'number';",
							"            pm.expect(numberType).to.eql(true);",
							"    });",
							"}",
							"pm.test(\"Right celsius to fahrenheit calculations.\", function(){",
							"    let temp_f = (responseData.current.temp_c * 9/5) + 32;",
							"    pm.expect(temp_f).to.eql(responseData.current.temp_f);",
							"",
							"    let feelslike_f = (responseData.current.feelslike_c * 9/5) + 32;",
							"    pm.expect(feelslike_f).to.eql(responseData.current.feelslike_f);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{api}}?key=00af06732aa44311a07131735221808&q=Prague",
					"host": [
						"{{url}}{{api}}"
					],
					"query": [
						{
							"key": "key",
							"value": "00af06732aa44311a07131735221808"
						},
						{
							"key": "q",
							"value": "Prague"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NoKey",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Error code within response is 1002\", function(){",
							"    pm.expect(responseData.error.code).to.eql(1002);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{api}}?q=Prague",
					"host": [
						"{{url}}{{api}}"
					],
					"query": [
						{
							"key": "q",
							"value": "Prague"
						},
						{
							"key": "key",
							"value": "00af06732aa44311a07131735221808",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MissingParameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error code within response is 1003\", function(){",
							"    pm.expect(responseData.error.code).to.eql(1003);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "00af06732aa44311a07131735221808",
							"type": "string"
						},
						{
							"key": "key",
							"value": "key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{api}}?key=00af06732aa44311a07131735221808",
					"host": [
						"{{url}}{{api}}"
					],
					"query": [
						{
							"key": "q",
							"value": "Prague",
							"disabled": true
						},
						{
							"key": "key",
							"value": "00af06732aa44311a07131735221808"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BadUrl",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error code within response is 1005\", function(){",
							"    pm.expect(responseData.error.code).to.eql(1005);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "00af06732aa44311a07131735221808",
							"type": "string"
						},
						{
							"key": "key",
							"value": "key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{api}}BadUrl?q=Prague&key=00af06732aa44311a07131735221808",
					"host": [
						"{{url}}{{api}}BadUrl"
					],
					"query": [
						{
							"key": "q",
							"value": "Prague"
						},
						{
							"key": "key",
							"value": "00af06732aa44311a07131735221808"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "BadValueParameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error code within response is 1006\", function(){",
							"    pm.expect(responseData.error.code).to.eql(1006);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "00af06732aa44311a07131735221808",
							"type": "string"
						},
						{
							"key": "key",
							"value": "key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{api}}?key=00af06732aa44311a07131735221808&q=Nesmysl",
					"host": [
						"{{url}}{{api}}"
					],
					"query": [
						{
							"key": "key",
							"value": "00af06732aa44311a07131735221808"
						},
						{
							"key": "q",
							"value": "Nesmysl"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "InvalidKey",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();",
							"",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"console.log(responseData.error.code);",
							"pm.test(\"Error code is 2006\", function(){",
							"    pm.expect(responseData.error.code).to.eql(2006);",
							"});",
							"pm.test(\"Error message is 'API key provided is invalid'.\", function(){",
							"    pm.expect(responseData.error.message).to.eql(\"API key provided is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "00af06732aa44311a07131735221808",
							"type": "string"
						},
						{
							"key": "key",
							"value": "key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}{{api}}?key=asdasdasgasegsrfgrgferg&q=Prague",
					"host": [
						"{{url}}{{api}}"
					],
					"query": [
						{
							"key": "key",
							"value": "asdasdasgasegsrfgrgferg"
						},
						{
							"key": "q",
							"value": "Prague"
						}
					]
				}
			},
			"response": []
		}
	]
}